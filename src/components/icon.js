import React, { useState } from 'react';

function renderIcon(icon, size, color) {
  const iconColor = color || '#333';
  switch(icon) {
    case 'dribbble':
      return (
        <svg width={size} height={size} viewBox={"0 0 25 25"} fill="none" preserveAspectRatio="xMidYMid">
          <path fill={color} d={`M20.7445 3.29546L20.2768 2.8524L20.2609 2.87961C18.0872 1.02524 15.3606 0 12.4995 0C10.9434 0 9.42684 0.302901 7.98216 0.892273L7.97549 0.885599L7.65154 1.02832C4.11735 2.59262 1.5391 5.77513 0.754129 9.54086L0.670959 9.94028L0.680714 9.9449C0.563147 10.6257 0.5 11.3146 0.5 12C0.5 15.5357 2.03863 18.8379 4.72931 21.1281L4.72521 21.1384L5.03427 21.3843C7.1823 23.0949 9.76363 23.999 12.4995 23.999C13.9437 23.999 15.3765 23.7325 16.7591 23.2068L17.0902 23.081V23.0661C21.0895 21.4623 23.8218 17.8922 24.3742 13.5694L24.403 13.5797L24.4543 12.9154C24.4754 12.6371 24.5 12.3224 24.5 12.0005C24.499 8.68144 23.1657 5.59031 20.7445 3.29546ZM23.4722 12C23.4722 12.0611 23.4712 12.1222 23.4696 12.1828C22.0285 11.75 20.5387 11.5313 19.0303 11.5313C17.7284 11.5313 16.4315 11.6961 15.1691 12.0221L15.1666 12.0149L15.1635 12.0159C14.9027 11.3141 14.6208 10.6292 14.321 9.97159L14.3256 9.96954L14.3215 9.96132C16.8443 8.72457 18.9579 6.84864 20.4863 4.49012C22.4167 6.53444 23.4722 9.17738 23.4722 12ZM19.7188 3.76572C18.2854 6.04158 16.2765 7.84718 13.8651 9.02952C12.5288 6.35013 10.8125 3.88791 8.75173 1.69419C9.95718 1.25319 11.214 1.02678 12.4995 1.02678C15.1691 1.02678 17.7119 2.00274 19.7188 3.76572ZM7.74497 2.1162C9.84782 4.29862 11.5918 6.76444 12.9379 9.45666C11.2155 10.1569 9.39707 10.5117 7.52524 10.5117C5.55639 10.5117 3.64965 10.1205 1.85176 9.34885C2.63468 6.19612 4.80273 3.53418 7.74497 2.1162ZM1.52678 12C1.52678 11.4584 1.56888 10.9142 1.64948 10.3736C3.51617 11.1442 5.48862 11.5379 7.52422 11.5379C9.54698 11.5379 11.5102 11.1462 13.3702 10.3833C13.6551 11.0071 13.9221 11.6545 14.1711 12.3209C10.2344 13.6228 7.0062 16.4362 5.17442 20.1593C2.84928 18.0744 1.52678 15.1363 1.52678 12ZM5.9902 20.8247C7.68491 17.2335 10.7586 14.5172 14.5212 13.2809C15.5054 16.2124 16.0224 19.265 16.0609 22.3679C14.8996 22.7689 13.7029 22.9722 12.4995 22.9722C10.1312 22.9727 7.88924 22.2314 5.9902 20.8247ZM17.0733 21.9654C16.9973 18.9082 16.4711 15.9018 15.5049 13.0078C18.0965 12.3553 20.8339 12.4369 23.3772 13.2404C22.9465 17.1457 20.5839 20.4088 17.0733 21.9654Z`}
          />
        </svg>
      );
    case 'linkedin':
      return (
        <svg width={size} height={size} viewBox={"0 0 25 24"} fill="none" preserveAspectRatio="xMidYMid">
          <path fill={color} d={`M3.73999 9.29831e-09C2.86001 9.29831e-09 2.06 0.320015 1.46 0.920014C0.820015 1.56 0.5 2.35996 0.5 3.19996C0.5 4.07995 0.859999 4.87996 1.46 5.47996C2.06 6.07996 2.9 6.43996 3.70001 6.39997C3.70001 6.39997 3.73999 6.39997 3.78002 6.39997C4.58004 6.39997 5.34002 6.07996 5.94002 5.47996C6.54002 4.87996 6.90002 4.07995 6.90002 3.19996C6.94 2.35996 6.58 1.55995 5.98 0.959951C5.38001 0.319968 4.57999 9.29831e-09 3.73999 9.29831e-09ZM5.38001 4.91999C4.93999 5.36001 4.33999 5.63999 3.70001 5.60001C3.10001 5.60001 2.46003 5.36001 2.02001 4.91999C1.54001 4.47998 1.30001 3.83999 1.30001 3.20001C1.30001 2.56003 1.54001 1.96003 2.02001 1.48003C2.46003 1.04001 3.06003 0.800014 3.73999 0.800014C4.33999 0.800014 4.93999 1.04001 5.38001 1.48003C5.86001 1.96003 6.10001 2.56003 6.10001 3.20001C6.10001 3.83999 5.86001 4.47998 5.38001 4.91999Z`} />
          <path fill={color} d={`M5.30003 7.19995H2.06004C1.42005 7.19995 0.900024 7.71993 0.900024 8.39995V22.3999C0.900024 23.0399 1.46004 23.5999 2.10002 23.5999H5.30003C5.94001 23.5999 6.50003 23.0399 6.50003 22.4399V8.39995C6.50003 7.75992 5.94001 7.19995 5.30003 7.19995ZM5.70002 22.4399C5.70002 22.6399 5.5 22.7999 5.30003 22.7999H2.10002C1.90001 22.7999 1.70004 22.5999 1.70004 22.3999V8.39995C1.70004 8.19993 1.86002 7.99997 2.06004 7.99997H5.30003C5.50005 7.99997 5.70002 8.19998 5.70002 8.39995V22.4399Z`} />
          <path fill={color} d={`M18.8999 6.79993H18.0599C16.4999 6.79993 15.02 7.47994 14.06 8.55994V7.99992C14.06 7.59994 13.66 7.19991 13.26 7.19991H9.25998C8.89998 7.19991 8.45996 7.51993 8.45996 7.95989V22.8798C8.45996 23.3199 8.89998 23.5998 9.25998 23.5998H13.66C14.02 23.5998 14.46 23.3199 14.46 22.8798V14.2399C14.46 12.9199 15.42 11.8799 16.66 11.8799C17.3 11.8799 17.9 12.1199 18.34 12.5599C18.74 12.9199 18.9 13.4799 18.9 14.1999V22.7999C18.9 23.1999 19.3 23.5999 19.7 23.5999H23.7C24.1 23.5999 24.5 23.1999 24.5 22.7999V12.4799C24.4999 9.27994 22.06 6.79993 18.8999 6.79993ZM23.6999 22.7599L23.6599 22.7999H19.7399L19.7 14.1999C19.7 13.2399 19.46 12.5199 18.94 11.9999C18.34 11.3999 17.54 11.0799 16.7 11.0799C15.02 11.1199 13.7 12.4799 13.7 14.2399V22.7999H9.29996V7.99992H13.26L13.2999 8.03991V10.5599L14.3799 9.47991L14.4199 9.43992C15.2199 8.31994 16.6199 7.59994 18.0999 7.59994H18.9399C21.6199 7.59994 23.6999 9.75994 23.6999 12.4799V22.7599Z`} />
        </svg>
      );
    case 'behance':
      return (
        <svg width={size} height={size} viewBox={"0 0 24 24"} fill="none" preserveAspectRatio="xMidYMid">
          <path fill={color} d="M22 7h-7v-2h7v2zm1.726 10c-.442 1.297-2.029 3-5.101 3-3.074 0-5.564-1.729-5.564-5.675 0-3.91 2.325-5.92 5.466-5.92 3.082 0 4.964 1.782 5.375 4.426.078.506.109 1.188.095 2.14h-8.027c.13 3.211 3.483 3.312 4.588 2.029h3.168zm-7.686-4h4.965c-.105-1.547-1.136-2.219-2.477-2.219-1.466 0-2.277.768-2.488 2.219zm-9.574 6.988h-6.466v-14.967h6.953c5.476.081 5.58 5.444 2.72 6.906 3.461 1.26 3.577 8.061-3.207 8.061zm-3.466-8.988h3.584c2.508 0 2.906-3-.312-3h-3.272v3zm3.391 3h-3.391v3.016h3.341c3.055 0 2.868-3.016.05-3.016z"/>
        </svg>
      );
    default:
      return null;
  }
}

export default ({onClick, type, size, color}) => {
  let mainColor = color;
  let onHoverColor = color;
  if (color instanceof Array) {
    mainColor = color[0];
    onHoverColor = color[1];
  }
  const [iconColor, setIconColor] = useState(mainColor);
  const style = {
    width: 'auto',
    height: 'auto',
    display: 'inline-block'
  };
  if (onClick) {
    style.cursor = 'pointer';
  }
  return (
    <div
      style={style}
      className={type}
      onClick={e => onClick ? onClick(e) : null}
      onMouseEnter={() => setIconColor(iconColor === mainColor ? onHoverColor : mainColor)}
      onMouseLeave={() => setIconColor(iconColor === mainColor ? onHoverColor : mainColor)}>
        {renderIcon(type, size || 32, iconColor)}
    </div>
  );
}
